[{"path":"https://jefflansing.github.io/layoutsquares/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 layoutsquares authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/articles/oriented-square-tiles.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"oriented-square-tiles","text":"following figure shows central oriented square, four different positions another oriented square can take around , laid plane.  figure, numbers corners square supposed indicate orientation. supposed work? numbers ordinals: ‘1’ means “first”, ‘2’ means “second”, ‘3’ means “third”, , corners can ordered, convenient. also corners don’t actually belong squares: square picked , rotated 3d, put back , vertices square ordered corners (usually) fit back together differently. old way thinking holds 3 kinds things involved : () plane, (ii) places, (iii) squares. squares fit places, places lie plane. way thinking, corners belong places. following table (oar dataset package) encodes information shown Figure 1, can queried used. pair neighboring corners Figure 1 either left half table right half, . Table 1. Neighbor associations example, suppose two faces vertices marked way meet common ridge (“edge”) polyhedron. two faces detached polyhedron, Table 1 tells fit back together, plane.  Figure 2 face 7 face 11, example_far dataset, share 2 vertices ids 11 13. face 7 vertex 13 corner 1 vertex 11 corner 4, face 11 vertex 13 corner 1 vertex 11 corner 2. Assuming face 7 fixed, vertices common ridge 2 faces corners 1 4, table corners opposite corners 2 3 (row 2 table). face 11 can rotated 3d vertex 13 corner 2 instead corner 1, vertex 11 corner 3 instead corner 2, two faces correctly aligned plane. following figure shows placements result possible 3d rotations face 11.  inspecting Figure 3 evident d8 element named “a3” rotation needed. layoutsquares package functions seem agree: documentation d8 describes operations way predicts placements appear Figure 3. Table 2. d8 description","code":"vv <- c(1L,4L) yy <- get_other_edge(vv) print(yy) # see the opposite corners #> [1] 2 3 op <- get_opuv(far, rar, 7, 11)  print(op) # see the 3d rotation, as a permutation in word form #> w x y z  #> 4 1 2 3 names(which(apply(d8, 1, function(r) {all(r == op)}))) #> [1] \"a3\""},{"path":"https://jefflansing.github.io/layoutsquares/articles/oriented-square-tiles.html","id":"the-face-array-data-structure-far","dir":"Articles","previous_headings":"","what":"The Face Array Data Structure (FAR)","title":"oriented-square-tiles","text":"face array used record state play process laying squares plane.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Lansing. Author, maintainer.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lansing J (2024). layoutsquares: Layout Squares Plane. R package version 0.0.0.9000, https://jefflansing.github.io/layoutsquares/.","code":"@Manual{,   title = {layoutsquares: Layout Squares on a Plane},   author = {Jeff Lansing},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://jefflansing.github.io/layoutsquares/}, }"},{"path":"https://jefflansing.github.io/layoutsquares/index.html","id":"layoutsquares","dir":"","previous_headings":"","what":"Layout Squares on a Plane","title":"Layout Squares on a Plane","text":"Layout faces polyhedron squares plane. happens 3 phases: 1. face rotated 3d 2. translated 2d 3. alligned plane.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/adjust_face.html","id":null,"dir":"Reference","previous_headings":"","what":"adjust face — adjust_face","title":"adjust face — adjust_face","text":"adjust face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/adjust_face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adjust face — adjust_face","text":"","code":"adjust_face(far, rar, u, v)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/adjust_face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adjust face — adjust_face","text":"far face array data structure rar ridge array data structure u index face v index adjoining face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/adjust_face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adjust face — adjust_face","text":"copy adjoining face rotated, shifted, aligned fit next face u plane","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/adjust_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adjust face — adjust_face","text":"","code":"far <- example_far rar <- example_rar adjust_face(far, rar, 1, 5) #> , , 1 #>  #>    a b  c  d #> nm 7 4 10 14 #> x  0 0  1  1 #> y  0 1  1  0 #>  #> , , 2 #>  #>    a b c d #> nm 7 6 2 4 #> x  0 0 1 1 #> y  0 1 1 0 #>  #> , , 3 #>  #>    a b  c d #> nm 3 4 10 9 #> x  0 0  1 1 #> y  0 1  1 0 #>  #> , , 4 #>  #>    a b c d #> nm 3 4 2 1 #> x  0 0 1 1 #> y  0 1 1 0 #>  #> , , 5 #>  #>     a  b c  d #> nm 14 10 9 13 #> x   1  1 2  2 #> y   0  1 1  0 #>  #> , , 6 #>  #>    a b  c  d #> nm 7 6 12 14 #> x  0 0  1  1 #> y  0 1  1  0 #>  #> , , 7 #>  #>     a  b  c  d #> nm 13 14 12 11 #> x   0  0  1  1 #> y   0  1  1  0 #>  #> , , 8 #>  #>    a b c d #> nm 5 6 2 1 #> x  0 0 1 1 #> y  0 1 1 0 #>  #> , , 9 #>  #>    a b  c  d #> nm 5 6 12 11 #> x  0 0  1  1 #> y  0 1  1  0 #>  #> , , 10 #>  #>    a b c d #> nm 3 1 8 9 #> x  0 0 1 1 #> y  0 1 1 0 #>  #> , , 11 #>  #>     a  b c d #> nm 13 11 8 9 #> x   0  0 1 1 #> y   0  1 1 0 #>  #> , , 12 #>  #>    a b c  d #> nm 5 1 8 11 #> x  0 0 1  1 #> y  0 1 1  0 #>"},{"path":"https://jefflansing.github.io/layoutsquares/reference/align_face.html","id":null,"dir":"Reference","previous_headings":"","what":"Align face — align_face","title":"Align face — align_face","text":"Align face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/align_face.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align face — align_face","text":"","code":"align_face(face)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/align_face.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align face — align_face","text":"face face polyhedron, 'face_array' structure","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/align_face.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align face — align_face","text":"face columns rearranged pass check_angles check","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/align_face.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align face — align_face","text":"","code":"face <- array(c(14,0,0,7,0,1,6,1,1,12,1,0), dim = c(3,4), dimnames = list(c('nm', 'x', 'y'), letters[1:4])) align_face(face) #>     a b c  d #> nm 14 7 6 12 #> x   0 0 1  1 #> y   0 1 1  0"},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_difuv.html","id":null,"dir":"Reference","previous_headings":"","what":"apply_diff for u,v — apply_difuv","title":"apply_diff for u,v — apply_difuv","text":"apply_diff u,v","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_difuv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply_diff for u,v — apply_difuv","text":"","code":"apply_difuv(far, u, v)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_difuv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply_diff for u,v — apply_difuv","text":"far face array data structure u index face v index adjoining face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_difuv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply_diff for u,v — apply_difuv","text":"translation matrix shift adjoining face aligns cave u","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_difuv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply_diff for u,v — apply_difuv","text":"","code":"far <- example_far apply_difuv(far, 1, 5) #>   a b c d #> x 0 0 0 0 #> y 0 0 0 0"},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_op.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply an operation — apply_op","title":"Apply an operation — apply_op","text":"Rotate face operation, align ,","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_op.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply an operation — apply_op","text":"","code":"apply_op(face, op)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_op.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply an operation — apply_op","text":"face face transform op 3d rotation operator","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_op.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply an operation — apply_op","text":"transformed face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/apply_op.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply an operation — apply_op","text":"","code":"face <- array(c(7,0,0,4,0,1,10,1,1,14,1,0),dim = c(3,4), dimnames = list(c('nm', 'x', 'y'), letters[1:4])) apply_op(face, d8[4,]) #>     a b c  d #> nm 14 7 4 10 #> x   0 0 1  1 #> y   0 1 1  0"},{"path":"https://jefflansing.github.io/layoutsquares/reference/check_angles.html","id":null,"dir":"Reference","previous_headings":"","what":"Check angles — check_angles","title":"Check angles — check_angles","text":"Check angles","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/check_angles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check angles — check_angles","text":"","code":"check_angles(angles)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/check_angles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check angles — check_angles","text":"angles vector 4 angles, degrees 0 360","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/check_angles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check angles — check_angles","text":"TRUE angles increase clockwise, else FALSE","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/check_angles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check angles — check_angles","text":"","code":"check_angles(c(45, 135, 225, 315)) # expect TRUE #> [1] TRUE check_angles(c(145, 35, 225, 315)) # expect FALSE #> [1] FALSE"},{"path":"https://jefflansing.github.io/layoutsquares/reference/d8.html","id":null,"dir":"Reference","previous_headings":"","what":"d8 — d8","title":"d8 — d8","text":"Description. (https://groupprops.subwiki.org/wiki/Dihedral_group:D8#Geometric_definition)","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/d8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"d8 — d8","text":"","code":"d8"},{"path":"https://jefflansing.github.io/layoutsquares/reference/d8.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"d8 — d8","text":"array 8 rows 4 variables:","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/d8.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"d8 — d8","text":"SageMath 9.5: G = DihedralGroup(4) print(gap.StructureDescription(G), gap.IdGroup(G)) per G:   d = per.dict()   print(tuple(d.values()))","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/d8.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"d8 — d8","text":"dihedral group D_8 (also called D_4) defined group symmetries square (regular 4-gon). cyclic subgroup comprising rotations (cyclic subgroup generated ) four reflections involution: reflections lines joining midpoints opposite sides, reflections diagonals.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/d8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"d8 — d8","text":"","code":"e <- layoutsquares::d8[1,] a  <- layoutsquares::d8[2,] a2 <- layoutsquares::d8[3,] a3 <- layoutsquares::d8[4,] x <- layoutsquares::d8[5,] ax <- layoutsquares::d8[6,] a2x <- layoutsquares::d8[7,] a3x <- layoutsquares::d8[8,]  d8ops <- list(e, a, a2, a3, x, ax, a2x, a3x)  # https://groupprops.subwiki.org/wiki/Dihedral_group:D8#Multiplication_table multiplication_table <- list(   list(e, a, a2, a3, x, ax, a2x, a3x),   list(a, a2, a3, e, ax, a2x, a3x, x),   list(a2, a3, e, a, a2x, a3x, x, ax),   list(a3, e, a, a2, a3x, x, ax, a2x),   list(x, a3x, a2x, ax, e, a3, a2, a),   list(ax, x, a3x, a2x, a, e, a3, a2),   list(a2x, ax, x, a3x, a2, a, e, a3),   list(a3x, a2x, ax, x, a3, a2, a, e) )  for(i in 1:8) {   for(j in 1:8) {     opi <- d8ops[[i]]     opj <- d8ops[[j]]     prod <- multiplication_table[[i]][[j]]     print(sprintf(\"%d,%d: c(%s)[c(%s)] ==  c(%s)\", i,j,       stringr::str_c(opi, collapse=','),       stringr::str_c(opj, collapse=','),       stringr::str_c(prod, collapse=',')))     stopifnot(all(opi[opj] == prod))   } } #> [1] \"1,1: c(1,2,3,4)[c(1,2,3,4)] ==  c(1,2,3,4)\" #> [1] \"1,2: c(1,2,3,4)[c(2,3,4,1)] ==  c(2,3,4,1)\" #> [1] \"1,3: c(1,2,3,4)[c(3,4,1,2)] ==  c(3,4,1,2)\" #> [1] \"1,4: c(1,2,3,4)[c(4,1,2,3)] ==  c(4,1,2,3)\" #> [1] \"1,5: c(1,2,3,4)[c(3,2,1,4)] ==  c(3,2,1,4)\" #> [1] \"1,6: c(1,2,3,4)[c(4,3,2,1)] ==  c(4,3,2,1)\" #> [1] \"1,7: c(1,2,3,4)[c(1,4,3,2)] ==  c(1,4,3,2)\" #> [1] \"1,8: c(1,2,3,4)[c(2,1,4,3)] ==  c(2,1,4,3)\" #> [1] \"2,1: c(2,3,4,1)[c(1,2,3,4)] ==  c(2,3,4,1)\" #> [1] \"2,2: c(2,3,4,1)[c(2,3,4,1)] ==  c(3,4,1,2)\" #> [1] \"2,3: c(2,3,4,1)[c(3,4,1,2)] ==  c(4,1,2,3)\" #> [1] \"2,4: c(2,3,4,1)[c(4,1,2,3)] ==  c(1,2,3,4)\" #> [1] \"2,5: c(2,3,4,1)[c(3,2,1,4)] ==  c(4,3,2,1)\" #> [1] \"2,6: c(2,3,4,1)[c(4,3,2,1)] ==  c(1,4,3,2)\" #> [1] \"2,7: c(2,3,4,1)[c(1,4,3,2)] ==  c(2,1,4,3)\" #> [1] \"2,8: c(2,3,4,1)[c(2,1,4,3)] ==  c(3,2,1,4)\" #> [1] \"3,1: c(3,4,1,2)[c(1,2,3,4)] ==  c(3,4,1,2)\" #> [1] \"3,2: c(3,4,1,2)[c(2,3,4,1)] ==  c(4,1,2,3)\" #> [1] \"3,3: c(3,4,1,2)[c(3,4,1,2)] ==  c(1,2,3,4)\" #> [1] \"3,4: c(3,4,1,2)[c(4,1,2,3)] ==  c(2,3,4,1)\" #> [1] \"3,5: c(3,4,1,2)[c(3,2,1,4)] ==  c(1,4,3,2)\" #> [1] \"3,6: c(3,4,1,2)[c(4,3,2,1)] ==  c(2,1,4,3)\" #> [1] \"3,7: c(3,4,1,2)[c(1,4,3,2)] ==  c(3,2,1,4)\" #> [1] \"3,8: c(3,4,1,2)[c(2,1,4,3)] ==  c(4,3,2,1)\" #> [1] \"4,1: c(4,1,2,3)[c(1,2,3,4)] ==  c(4,1,2,3)\" #> [1] \"4,2: c(4,1,2,3)[c(2,3,4,1)] ==  c(1,2,3,4)\" #> [1] \"4,3: c(4,1,2,3)[c(3,4,1,2)] ==  c(2,3,4,1)\" #> [1] \"4,4: c(4,1,2,3)[c(4,1,2,3)] ==  c(3,4,1,2)\" #> [1] \"4,5: c(4,1,2,3)[c(3,2,1,4)] ==  c(2,1,4,3)\" #> [1] \"4,6: c(4,1,2,3)[c(4,3,2,1)] ==  c(3,2,1,4)\" #> [1] \"4,7: c(4,1,2,3)[c(1,4,3,2)] ==  c(4,3,2,1)\" #> [1] \"4,8: c(4,1,2,3)[c(2,1,4,3)] ==  c(1,4,3,2)\" #> [1] \"5,1: c(3,2,1,4)[c(1,2,3,4)] ==  c(3,2,1,4)\" #> [1] \"5,2: c(3,2,1,4)[c(2,3,4,1)] ==  c(2,1,4,3)\" #> [1] \"5,3: c(3,2,1,4)[c(3,4,1,2)] ==  c(1,4,3,2)\" #> [1] \"5,4: c(3,2,1,4)[c(4,1,2,3)] ==  c(4,3,2,1)\" #> [1] \"5,5: c(3,2,1,4)[c(3,2,1,4)] ==  c(1,2,3,4)\" #> [1] \"5,6: c(3,2,1,4)[c(4,3,2,1)] ==  c(4,1,2,3)\" #> [1] \"5,7: c(3,2,1,4)[c(1,4,3,2)] ==  c(3,4,1,2)\" #> [1] \"5,8: c(3,2,1,4)[c(2,1,4,3)] ==  c(2,3,4,1)\" #> [1] \"6,1: c(4,3,2,1)[c(1,2,3,4)] ==  c(4,3,2,1)\" #> [1] \"6,2: c(4,3,2,1)[c(2,3,4,1)] ==  c(3,2,1,4)\" #> [1] \"6,3: c(4,3,2,1)[c(3,4,1,2)] ==  c(2,1,4,3)\" #> [1] \"6,4: c(4,3,2,1)[c(4,1,2,3)] ==  c(1,4,3,2)\" #> [1] \"6,5: c(4,3,2,1)[c(3,2,1,4)] ==  c(2,3,4,1)\" #> [1] \"6,6: c(4,3,2,1)[c(4,3,2,1)] ==  c(1,2,3,4)\" #> [1] \"6,7: c(4,3,2,1)[c(1,4,3,2)] ==  c(4,1,2,3)\" #> [1] \"6,8: c(4,3,2,1)[c(2,1,4,3)] ==  c(3,4,1,2)\" #> [1] \"7,1: c(1,4,3,2)[c(1,2,3,4)] ==  c(1,4,3,2)\" #> [1] \"7,2: c(1,4,3,2)[c(2,3,4,1)] ==  c(4,3,2,1)\" #> [1] \"7,3: c(1,4,3,2)[c(3,4,1,2)] ==  c(3,2,1,4)\" #> [1] \"7,4: c(1,4,3,2)[c(4,1,2,3)] ==  c(2,1,4,3)\" #> [1] \"7,5: c(1,4,3,2)[c(3,2,1,4)] ==  c(3,4,1,2)\" #> [1] \"7,6: c(1,4,3,2)[c(4,3,2,1)] ==  c(2,3,4,1)\" #> [1] \"7,7: c(1,4,3,2)[c(1,4,3,2)] ==  c(1,2,3,4)\" #> [1] \"7,8: c(1,4,3,2)[c(2,1,4,3)] ==  c(4,1,2,3)\" #> [1] \"8,1: c(2,1,4,3)[c(1,2,3,4)] ==  c(2,1,4,3)\" #> [1] \"8,2: c(2,1,4,3)[c(2,3,4,1)] ==  c(1,4,3,2)\" #> [1] \"8,3: c(2,1,4,3)[c(3,4,1,2)] ==  c(4,3,2,1)\" #> [1] \"8,4: c(2,1,4,3)[c(4,1,2,3)] ==  c(3,2,1,4)\" #> [1] \"8,5: c(2,1,4,3)[c(3,2,1,4)] ==  c(4,1,2,3)\" #> [1] \"8,6: c(2,1,4,3)[c(4,3,2,1)] ==  c(3,4,1,2)\" #> [1] \"8,7: c(2,1,4,3)[c(1,4,3,2)] ==  c(2,3,4,1)\" #> [1] \"8,8: c(2,1,4,3)[c(2,1,4,3)] ==  c(1,2,3,4)\"  rm(e, a, a2, a3, x, ax, a2x, a3x, d8ops)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/depth_first_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Depth First — depth_first_gr","title":"Depth First — depth_first_gr","text":"Recurse adjacency matrix graph, looking row/column intersections, keeping track intersections already seen","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/depth_first_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depth First — depth_first_gr","text":"","code":"depth_first_gr(g)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/depth_first_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depth First — depth_first_gr","text":"g igraph graph","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/depth_first_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depth First — depth_first_gr","text":"list indices edges traversed depth first order","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/depth_first_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Depth First — depth_first_gr","text":"","code":"graph <- rgraph6::igraph_from_text(\"KP@?Y_AG?C?G\")[[1]] depth_first_gr(graph) #>  [1]  1  5  4  6 11  3  2  8 10  9  7"},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_far.html","id":null,"dir":"Reference","previous_headings":"","what":"example_far — example_far","title":"example_far — example_far","text":"Description.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_far.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example_far — example_far","text":"","code":"example_far"},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_far.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example_far — example_far","text":"data frame 3 rows 4 variables:","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_far.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"example_far — example_far","text":"Source","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_rar.html","id":null,"dir":"Reference","previous_headings":"","what":"example_rar — example_rar","title":"example_rar — example_rar","text":"Description.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_rar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example_rar — example_rar","text":"","code":"example_rar"},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_rar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example_rar — example_rar","text":"data frame 24 rows 4 variables:","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/example_rar.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"example_rar — example_rar","text":"Source","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get angle — get_angle","title":"Get angle — get_angle","text":"Given center point periferal point, determine angle corresponding plane vector respect line pointing towards 'South Pole', going clockwise 6:00","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get angle — get_angle","text":"","code":"get_angle(cent, perif)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get angle — get_angle","text":"cent center point perif periferal point","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get angle — get_angle","text":"number 0 360","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get angle — get_angle","text":"","code":"get_angle(c(0,0), c(1,1)) # expect 225 #> [1] 225"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angles.html","id":null,"dir":"Reference","previous_headings":"","what":"get_angles — get_angles","title":"get_angles — get_angles","text":"get_angles","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_angles — get_angles","text":"","code":"get_angles(mx)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_angles — get_angles","text":"mx 2x4 matrix vertex coordinates","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_angles — get_angles","text":"vector angles vertices mx","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_angles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_angles — get_angles","text":"","code":"face <- array(c(7,0,0,4,0,1,10,1,1,14,1,0), dim = c(3,4), dimnames = list(c('nm', 'x', 'y'), letters[1:4])) mx <- face[c('x','y'),] get_angles(mx) # expect 45 135 225 315 #>   a   b   c   d  #>  45 135 225 315"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_evids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get edge vertex ids — get_evids","title":"Get edge vertex ids — get_evids","text":"First call depth_first_gr, convert edge ids pairs vertex ids, using vector vertex names guidance","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_evids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get edge vertex ids — get_evids","text":"","code":"get_evids(gr, vnames)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_evids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get edge vertex ids — get_evids","text":"gr igraph graph object vnames character vector vertex names","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_evids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get edge vertex ids — get_evids","text":"matrix vertix ids","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_evids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get edge vertex ids — get_evids","text":"","code":"vnames <- as.character(1:14) graph <- rgraph6::igraph_from_text(\"KP@?Y_AG?C?G\")[[1]] get_evids(graph, vnames) #>       [,1] [,2] #>  [1,]    1    3 #>  [2,]    3   10 #>  [3,]    3    4 #>  [4,]    4    8 #>  [5,]    8   12 #>  [6,]    8    2 #>  [7,]    2    6 #>  [8,]    6    7 #>  [9,]    7   11 #> [10,]    7    9 #> [11,]    7    5"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_opuv.html","id":null,"dir":"Reference","previous_headings":"","what":"get_op for u, v — get_opuv","title":"get_op for u, v — get_opuv","text":"get_op u, v","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_opuv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_op for u, v — get_opuv","text":"","code":"get_opuv(far, rar, u, v)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_opuv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_op for u, v — get_opuv","text":"far face array data structure rar ridge array data structure u index face v index adjoining face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_opuv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_op for u, v — get_opuv","text":"operator , applied face v, aligns v u","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_opuv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_op for u, v — get_opuv","text":"","code":"far <- example_far rar <- example_rar get_opuv(far, rar, 1, 3) #> w x y z  #> 2 1 4 3"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_other_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Get other edge — get_other_edge","title":"Get other edge — get_other_edge","text":"Get edge","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_other_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get other edge — get_other_edge","text":"","code":"get_other_edge(edge)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_other_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get other edge — get_other_edge","text":"edge edge face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_other_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get other edge — get_other_edge","text":"adjoining edge adjoining face","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/get_other_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get other edge — get_other_edge","text":"","code":"xx <- c(1,4) yy <- c(2,3) identical(get_other_edge(xx), yy) #> [1] TRUE"},{"path":"https://jefflansing.github.io/layoutsquares/reference/is_e.html","id":null,"dir":"Reference","previous_headings":"","what":"is e — is_e","title":"is e — is_e","text":"e","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/is_e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is e — is_e","text":"","code":"is_e(op)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/is_e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is e — is_e","text":"op operator","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/is_e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is e — is_e","text":"TRUE OP identity d8, else return FALSE","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/layoutsquares-package.html","id":null,"dir":"Reference","previous_headings":"","what":"layoutsquares: Layout Squares on a Plane — layoutsquares-package","title":"layoutsquares: Layout Squares on a Plane — layoutsquares-package","text":"Layout faces polyhedron squares plane.","code":""},{"path":[]},{"path":"https://jefflansing.github.io/layoutsquares/reference/layoutsquares-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"layoutsquares: Layout Squares on a Plane — layoutsquares-package","text":"Maintainer: Jeff Lansing lansing2357@gmail.com (ORCID)","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/nm.html","id":null,"dir":"Reference","previous_headings":"","what":"nm — nm","title":"nm — nm","text":"nm","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/nm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nm — nm","text":"","code":"nm"},{"path":"https://jefflansing.github.io/layoutsquares/reference/nm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"nm — nm","text":"object class numeric length 1.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/nm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nm — nm","text":"index row face_array data structure contain names corners faces","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/nm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nm — nm","text":"","code":"far <- example_far nm <- 1 far[nm,,1] #>  a  b  c  d  #>  7  4 10 14"},{"path":"https://jefflansing.github.io/layoutsquares/reference/oar.html","id":null,"dir":"Reference","previous_headings":"","what":"oar — oar","title":"oar — oar","text":"Description.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/oar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"oar — oar","text":"","code":"oar"},{"path":"https://jefflansing.github.io/layoutsquares/reference/oar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"oar — oar","text":"array 4 rows 4 variables:","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/oar.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"oar — oar","text":"Source","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/selectby_uv.html","id":null,"dir":"Reference","previous_headings":"","what":"select by u and v — selectby_uv","title":"select by u and v — selectby_uv","text":"SELECT * rar (f1 = u f2 = v) (f1 = v f2 = u)","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/selectby_uv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select by u and v — selectby_uv","text":"","code":"selectby_uv(rar, u, v)"},{"path":"https://jefflansing.github.io/layoutsquares/reference/selectby_uv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select by u and v — selectby_uv","text":"rar ridge array data structure u index face r v index another face rar","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/selectby_uv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"select by u and v — selectby_uv","text":"row rar contains faces","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/selectby_uv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"select by u and v — selectby_uv","text":"","code":"rar <- example_rar selectby_uv(rar, 1,5)[3:4] #> v1 v2  #> 10 14"},{"path":"https://jefflansing.github.io/layoutsquares/reference/xy.html","id":null,"dir":"Reference","previous_headings":"","what":"xy — xy","title":"xy — xy","text":"xy","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xy — xy","text":"","code":"xy"},{"path":"https://jefflansing.github.io/layoutsquares/reference/xy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"xy — xy","text":"object class numeric length 2.","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xy — xy","text":"indices rows face_array data structure contain x y coordinates","code":""},{"path":"https://jefflansing.github.io/layoutsquares/reference/xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"xy — xy","text":"","code":"far <- example_far xy <- c(2,3) far[xy,,1] #>   a b c d #> x 0 0 1 1 #> y 0 1 1 0"}]
